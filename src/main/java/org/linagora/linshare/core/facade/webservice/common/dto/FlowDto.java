/*
 * Copyright (C) 2007-2023 - LINAGORA
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.linagora.linshare.core.facade.webservice.common.dto;

import javax.xml.bind.annotation.XmlRootElement;

import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;

@JsonInclude(JsonInclude.Include.NON_NULL)
@XmlRootElement(name = "Flowjs")
@Schema(name = "FlowjsDto", description = "Response Object for Flowjs file uploads")
public class FlowDto {

	@Schema(description = "position number of the chunk corresponding to the dto response")
	protected long chunkNumber;

	@Schema(description = "Filename")
	protected String fileName;

	@Schema(description = "the document created and stored after all chunks have been uploaded successfully")
	protected EntryDto entry;

	@Schema(description = "a boolean to indicate whether this is the last chunk uploaded")
	protected boolean isLastChunk;

	@Schema(description = "Flag to indicate if the chunk has been uploaded successfully")
	protected boolean chunkUploadSuccess;

	@Schema(description = "True if async upload is enabled")
	protected Boolean isAsync;

	@Schema(description = "Uuid of the asynchronous task, generated by the server and given back to FlowUploader")
	protected String asyncTaskUuid;

	@Schema(description = "Error message")
	protected String errorMessage;

	@Schema(description = "Optional error code")
	protected Integer errCode;

	@Schema(description = "The delay between every request to ask if upload is complete.")
	protected Integer frequence;

	public FlowDto() {
		super();
		this.isLastChunk = false;
	}

	public FlowDto(long chunkNumber) {
		super();
		this.chunkNumber = chunkNumber;
		this.isLastChunk = false;
	}

	public long getChunkNumber() {
		return chunkNumber;
	}

	public void setChunkNumber(long chunkNumber) {
		this.chunkNumber = chunkNumber;
	}

	public String getFilename() {
		return fileName;
	}

	public void setFilename(String filename) {
		this.fileName = filename;
	}

	public EntryDto getEntry() {
		return entry;
	}

	public void setEntry(EntryDto entry) {
		this.entry = entry;
	}

	public boolean isLastChunk() {
		return isLastChunk;
	}

	public void setLastChunk(boolean isLastChunk) {
		this.isLastChunk = isLastChunk;
	}

	public boolean isChunkUploadSuccess() {
		return chunkUploadSuccess;
	}

	public void setChunkUploadSuccess(boolean chunkUploadSuccess) {
		this.chunkUploadSuccess = chunkUploadSuccess;
	}

	public Boolean getIsAsync() {
		return isAsync;
	}

	public void setIsAsync(Boolean isAsync) {
		this.isAsync = isAsync;
	}

	public String getAsyncTaskUuid() {
		return asyncTaskUuid;
	}

	public void setAsyncTaskUuid(String asyncTaskUuid) {
		this.asyncTaskUuid = asyncTaskUuid;
	}

	public String getErrorMessage() {
		return errorMessage;
	}

	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	public Integer getFrequence() {
		return frequence;
	}

	public void setFrequence(Integer frequence) {
		this.frequence = frequence;
	}

	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	public Integer getErrCode() {
		return errCode;
	}

	public void setErrCode(Integer errCode) {
		this.errCode = errCode;
	}

	public void completeAsyncTransfert(AsyncTaskDto asyncTask) {
		this.isAsync = true;
		this.asyncTaskUuid = asyncTask.getUuid();
		setFilename(asyncTask.getFileName());
		this.setLastChunk(true);
		this.setChunkUploadSuccess(true);
	}

	public void completeTransfert(EntryDto uploadedEntry) {
		this.setEntry(uploadedEntry);
		this.setLastChunk(true);
		this.setChunkUploadSuccess(true);
	}

	@Override
	public String toString() {
		return "FlowDto [chunkNumber=" + chunkNumber + ", fileName=" + fileName + ", entry=" + entry + ", isLastChunk="
				+ isLastChunk + ", chunkUploadSuccess=" + chunkUploadSuccess + ", isAsync=" + isAsync
				+ ", asyncTaskUuid=" + asyncTaskUuid + ", errorMessage=" + errorMessage + ", errCode=" + errCode
				+ ", frequence=" + frequence + "]";
	}
}
