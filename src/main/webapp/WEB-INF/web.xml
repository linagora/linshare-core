<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	/*
 * LinShare is an open source filesharing software, part of the LinPKI software
 * suite, developed by Linagora.
 * 
 * Copyright (C) 2013-2022 LINAGORA
 * 
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version, provided you comply with the Additional Terms applicable for
 * LinShare software by Linagora pursuant to Section 7 of the GNU Affero General
 * Public License, subsections (b), (c), and (e), pursuant to which you must
 * notably (i) retain the display of the “LinShare™” trademark/logo at the top
 * of the interface window, the display of the “You are using the Open Source
 * and free version of LinShare™, powered by Linagora © 2009–2022. Contribute to
 * Linshare R&D by subscribing to an Enterprise offer!” infobox and in the
 * e-mails sent with the Program, (ii) retain all hypertext links between
 * LinShare and linshare.org, between linagora.com and Linagora, and (iii)
 * refrain from infringing Linagora intellectual property rights over its
 * trademarks and commercial brands. Other Additional Terms apply, see
 * <http://www.linagora.com/licenses/> for more details.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Affero General Public License and
 * its applicable Additional Terms for LinShare along with this program. If not,
 * see <http://www.gnu.org/licenses/> for the GNU Affero General Public License
 * version 3 and <http://www.linagora.com/licenses/> for the Additional Terms
 * applicable to LinShare software.
 */
-->

<web-app>
	<display-name>LinShare, the secure sharing application</display-name>

<!-- 	<context-param> -->
<!-- The only significant configuration for Tapestry 5, this informs Tapestry -->
<!-- 			of where to look for pages, components and mixins. --> -->
<!-- 		<param-name>tapestry.app-package</param-name> -->
<!-- 		<param-value>org.linagora.linshare.view.tapestry</param-value> -->
<!-- 	</context-param> -->

<!--     <context-param> -->
<!-- 		 Required as migration 5.0 => 5.1 --> -->
<!--         <param-name>tapestry.use-external-spring-context</param-name> -->
<!--         <param-value>true</param-value> -->
<!--     </context-param> -->


	<context-param>
		<param-name>spring.profiles.default</param-name>
		<param-value>default,jcloud,mongo,batches</param-value>
		<!-- You can override this parameter using -Dspring.profiles.active=xxx -->
		<!-- Or you can use environment variable : SPRING_PROFILES_ACTIVE -->
		<!-- You must enable at least one authentication profile among authentication profiles,
			 one profile among file data store profiles and one among mongodb profiles described below.

		Available authentication profiles :
			* default : default authentication process.
			* sso : Enable headers injection for SSO. This profile includes default profile capabilities
			The default profile is jcloud with filesystem for tests purpose.
		Available file data store profiles :
			* jcloud : Using jcloud as file data store : Amazon S3, Swift, Ceph, filesystem (test only).
			* gridfs : Using gridfs (mongodb) as file data store.
			Recommended profile for production is jcloud with Swift.
			The default profile is jcloud with filesystem for tests purpose.
		Available tests:
			* tests: this profile is designed to add some extra methods to allow us to do deep API testing from the linshare-core-tests project.
		Additional profiles :
			* batches : enable Quartz jobs  (cron tasks).
		 -->
	</context-param>

	<context-param>
		<!-- Spring configuration files -->
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:springContext-*.xml</param-value>
	</context-param>


    <filter>
        <filter-name>charsetFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter>
        <filter-name>springSecurityFilterChainProxy</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
<!-- 	<filter> -->
<!-- 		<filter-name>app</filter-name> -->
 		<!-- Special filter that adds in a T5 IoC module derived from the Spring WebApplicationContext. -->
<!-- 		<filter-class>org.apache.tapestry5.spring.TapestrySpringFilter</filter-class> -->
<!-- 	</filter> -->

	<filter-mapping>
		<filter-name>charsetFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>springSecurityFilterChainProxy</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
<!-- 	<filter-mapping> -->
<!-- 		<filter-name>app</filter-name> -->
<!-- 		<url-pattern>/*</url-pattern> -->
<!-- 	</filter-mapping> -->

	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<display-name>CXF Servlet</display-name>
		<servlet-class>
			org.apache.cxf.transport.servlet.CXFServlet
		</servlet-class>
		<load-on-startup>1</load-on-startup>
		<init-param>
			<param-name>hide-service-list-page</param-name>
			<param-value>false</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/webservice/*</url-pattern>
	</servlet-mapping>


	<servlet>
		<servlet-name>root-interceptor</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:springContext-servlet.xml</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>root-interceptor</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>
	<!-- 
		*****************************************
		Listener for Spring webapp context loader
		*****************************************
	-->

	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	<listener>
		<listener-class>
			org.springframework.web.context.request.RequestContextListener
		</listener-class>
	</listener>
</web-app>

