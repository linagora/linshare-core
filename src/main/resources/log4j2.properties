# Uncomment those lines if you want to have Log4j itself in trace mode
# status = trace
# dest = out
# name = PropertiesConfig

# This property defines the appender(s) used by Log4J2
# You can define a LOG4J2_APPENDER env variable in order to change the default value: CONSOLE
# Available appenders are: CONSOLE, CONSOLE_JSON & LINSHARE
# You can also use specify appenders in the env variable by joining them with a comma
property.LOG4J2_APPENDER=${env:LOG4J2_APPENDER:-CONSOLE}

# Default to info level output; this is very handy if you eventually use Hibernate as well.
rootLogger=INFO, ${LOG4J2_APPENDER}

# In order to use an external configuration file for log4j, use this key for JAVA_OPS
# JAVA_OPTS="${JAVA_OPTS} -Dlog4j2.configurationFile=file:/etc/linshare/log4j2.properties"

# To modify log levels at runtime you could use REST API or JMX.
# an embedded JMX term is available inside LinShare WAR : linshare/WEB-INF/lib/jmxterm-1.0-alpha-4-uber.jar
# You can launch it using the following command: java -jar jmxterm-1.0-alpha-4-uber.jar
# Example :
# First you have to look for the LinShare java process, open a connection, displays all LinShare beans
# Then select the wanted JMX bean, display current value and  update it.
# $> jvms
# $> open <pid>
# $> domain LinshareJMXBeans
# $> bean LinshareJMXBeans:name=LinshareLoggers
# $> info
# $> run level org.linagora.linshare
# $> run level org.linagora.linshare INFO

# Define all the appenders
# The user launching LinShare should have writing rights on this folder.
property.filename=${env:LINSHARE_HOME}/var/lib/linshare/log/linshare.log

appender.LINSHARE.type=RollingFile
appender.LINSHARE.name=LINSHARE
appender.LINSHARE.fileName=${filename}
# Roll-over the log once per day
appender.LINSHARE.filePattern=${filename}.%d{yyyy-MM-dd}
appender.LINSHARE.layout.type=PatternLayout
appender.LINSHARE.policies.type = Policies
appender.LINSHARE.policies.time.type = TimeBasedTriggeringPolicy
appender.LINSHARE.policies.time.interval = 1
#appender.LINSHARE.layout.ConversionPattern = %d [%t] %-5p %c- %m%n
appender.LINSHARE.layout.pattern=[%p]:%t:%d{yyyyMMdd.HHmmss}:%c:%M:%m%n

# CONSOLE is set to be a Console.
appender.CONSOLE.type=Console
appender.CONSOLE.name=CONSOLE

# CONSOLE uses PatternLayout.
appender.CONSOLE.layout.type=PatternLayout
appender.CONSOLE.layout.pattern=[%p]:%t:%d{yyyyMMdd.HHmmss}:%c:%M:%m%n

# CONSOLE_JSON appender
# JSON layout
appender.CONSOLE_JSON.type=Console
appender.CONSOLE_JSON.name=CONSOLE_JSON
appender.CONSOLE_JSON.layout.type=JSONLayout
appender.CONSOLE_JSON.layout.compact=true
appender.CONSOLE_JSON.layout.eventEol=true
appender.CONSOLE_JSON.layout.properties=true
appender.CONSOLE_JSON.layout.stacktraceAsString=true
appender.CONSOLE_JSON.layout.includeTimeMillis=true

# Disable info message "[INFO]:AbstractContextSource:afterPropertiesSet:Property 'userDn' not set - anonymous context will be used for read-write operations"
logger.AbstractContextSource = WARN, ${LOG4J2_APPENDER}
logger.AbstractContextSource.name = org.springframework.ldap.core.support.AbstractContextSource

# Disable warn message : [WARN] org.hibernate.engine.StatefulPersistenceContext.ProxyWarnLog:narrowProxy:
#								Narrowing proxy to class org.linagora.linshare.core.domain.entities.LdapUserProvider - this operation breaks ==
# v1
logger.hibernate = ERROR, ${LOG4J2_APPENDER}
logger.hibernate.name = org.hibernate.engine.StatefulPersistenceContext.ProxyWarnLog
# v2
logger.hibernatev2 = ERROR, ${LOG4J2_APPENDER}
logger.hibernatev2.name = logger.org.hibernate.engine.internal.StatefulPersistenceContext

### advance debug configuration

## Authentication stack
# logger.security = INFO, ${LOG4J2_APPENDER}
# logger.security.name = org.springframework.security
# ldap query (only bind)
# logger.securityldap = INFO, ${LOG4J2_APPENDER}
# logger.securityldap.name = org.springframework.security.ldap

## Hibernate, queries and transactions.
#logger.transaction = DEBUG, ${LOG4J2_APPENDER}
#logger.transaction.name = org.springframework.transaction
#logger.HibernateTransactionManager = DEBUG, ${LOG4J2_APPENDER}
#logger.HibernateTransactionManager.name = org.springframework.orm.hibernate3.HibernateTransactionManager
#logger.hibernatesql = DEBUG, ${LOG4J2_APPENDER}
#logger.hibernatesql.name = org.hibernate.SQL
## Logs the JDBC parameters passed to a query
#logger.hibernatetype = TRACE, ${LOG4J2_APPENDER}
#logger.hibernatetype.name = org.hibernate.type


### advanced debug configuration
#logger.jclouds = DEBUG, ${LOG4J2_APPENDER}
#logger.jclouds.name = org.jclouds

## LDAP bindings debug (for users or groups)
# logger.linshareldap = TRACE, ${LOG4J2_APPENDER}
# logger.linshareldap.name = org.linagora.linshare.ldap

## Show query with MongoRepository and Spring Data.
# logger.MongoTemplate = DEBUG, ${LOG4J2_APPENDER}
# logger.MongoTemplate.name = org.springframework.data.mongodb.core.MongoTemplate

logger.linshare = INFO, ${LOG4J2_APPENDER}
logger.linshare.name = org.linagora.linshare
logger.jclouds = INFO, ${LOG4J2_APPENDER}
logger.jclouds.name = org.jclouds

# Log exceptions stacktrace
# logger.interceptor = DEBUG, ${LOG4J2_APPENDER}
# logger.interceptor.name = org.linagora.linshare.webservice.interceptor
