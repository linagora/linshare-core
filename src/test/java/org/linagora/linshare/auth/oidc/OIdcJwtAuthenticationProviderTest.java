/*
 * Copyright (C) 2007-2023 - LINAGORA
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.linagora.linshare.auth.oidc;

import com.nimbusds.jwt.JWT;
import com.nimbusds.jwt.JWTParser;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.linagora.linshare.auth.jwt.JwtAuthenticationToken;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.Authentication;

import java.text.ParseException;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;

@ExtendWith({ MockitoExtension.class })
class OIdcJwtAuthenticationProviderTest {

	OidcAuthenticationTokenDetailsFactory oidcAuthenticationTokenDetailsFactoryMock = Mockito.mock(OidcAuthenticationTokenDetailsFactory.class);
	static MockedStatic<OidcLinShareUserClaims> claimsMockedStatic = Mockito.mockStatic(OidcLinShareUserClaims.class);

	private OIdcJwtAuthenticationProvider subj =
			new OIdcJwtAuthenticationProvider(oidcAuthenticationTokenDetailsFactoryMock,
					"issuerUrl", true);

	private String authToken = "eyJ0eXAiOiJKV1QiLCJub25jZSI6IjYzUWUyQlNlZXM0MDhCcGpYMXJ1RlkySHUxUFcxdG1HaG9yLWVNVmw1NEkiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNmVjYTI3MC04ZjJjLTRhZTYtYWY5YS1jYjA5NzUwMjQ2OWEvIiwiaWF0IjoxNjc0NzMzNzkzLCJuYmYiOjE2NzQ3MzM3OTMsImV4cCI6MTY3NDczODExMSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFUUUF5LzhUQUFBQTBJS3JOa3hQeTFkdFN6Q3Q5MktWbjdGWUxUbkVRbVJmaTRGMitxTnloRC9CZWovMW85K2dTL245SjZqL0EwV1QiLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6IkxpbnNoYXJlLWFwcCIsImFwcGlkIjoiNjY0MDk4MmMtNmRjOC00MTkzLWFkNzAtNzU1NjdmMjBjNWUzIiwiYXBwaWRhY3IiOiIwIiwiZmFtaWx5X25hbWUiOiJTaGVwaWxvdiIsImdpdmVuX25hbWUiOiJBbnRvbiIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjM3LjE3MS4yMDkuMjU1IiwibmFtZSI6IkFudG9uIFNoZXBpbG92Iiwib2lkIjoiZTE0NGVhNDMtMmFhZS00MzQ0LWE2YjAtMTllOTRkZjNkYjA5IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDMyMDAyNkM1RUFDQkUiLCJyaCI6IjAuQVU0QWNLTHMxaXlQNWtxdm1zc0pkUUpHbWdNQUFBQUFBQUFBd0FBQUFBQUFBQUNEQUZRLiIsInNjcCI6ImVtYWlsIG9wZW5pZCBwcm9maWxlIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiTUU3ZjFLZlNsVTd1Y1hwUWZFcFRnM3MtVEFnQUpzbGNlNDlXVkt4VVdHdyIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJBRiIsInRpZCI6ImQ2ZWNhMjcwLThmMmMtNGFlNi1hZjlhLWNiMDk3NTAyNDY5YSIsInVuaXF1ZV9uYW1lIjoiYW50b25Ad2JvdWRpY2hlbGluYWdvcmEub25taWNyb3NvZnQuY29tIiwidXBuIjoiYW50b25Ad2JvdWRpY2hlbGluYWdvcmEub25taWNyb3NvZnQuY29tIiwidXRpIjoiVDFmcGRkUzZjRWUxa0c0TkN5eEFBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiYjc5ZmJmNGQtM2VmOS00Njg5LTgxNDMtNzZiMTk0ZTg1NTA5Il0sInhtc19zdCI6eyJzdWIiOiJaNnFaZ3RvbkVJUWQxWWRPTlpDTFJ4SVJxc3FIcTY4c3haNEE5ZGZ6NTBnIn0sInhtc190Y2R0IjoxNjc0MjI4NDEyfQ.lk317_NvCketwE-fmfTAAhSqxgjWBd8onT0XnYeAzlKkT12M90be_3hVDitOWoIXZLswg0k-RI7MTdLZpFS_8PNCOq2O0LxYxYHbihUSYgtO5ZvygCgAgd1alCSNeCaLQdaREfO94dgMXQbRCRf1pZrrhWPSSABDXxNhZkbT4PsMS5ugzYyEkCmlmM60dJ12zxZQCOT-sI46N8wralBLslWsBGyJjAu4QzZ1P-YAGyLSUzM8qPdRZf4IiGJ0HrhDgESFdBGzDUjdoPc-0c6mKEDGnG_D5EvH5B-UxoZl-QUrdRRLFPrx8jTNkMfbjNAT3czuqrsAj0cSMZ3YQ0IK6Q";
	private String idToken = "eyJ0eXAiOiJKV1QiLCJub25jZSI6IjYzUWUyQlNlZXM0MDhCcGpYMXJ1RlkySHUxUFcxdG1HaG9yLWVNVmw1NEkiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNmVjYTI3MC04ZjJjLTRhZTYtYWY5YS1jYjA5NzUwMjQ2OWEvIiwiaWF0IjoxNjc0NzMzNzkzLCJuYmYiOjE2NzQ3MzM3OTMsImV4cCI6MTY3NDczODExMSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFUUUF5LzhUQUFBQTBJS3JOa3hQeTFkdFN6Q3Q5MktWbjdGWUxUbkVRbVJmaTRGMitxTnloRC9CZWovMW85K2dTL245SjZqL0EwV1QiLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6IkxpbnNoYXJlLWFwcCIsImFwcGlkIjoiNjY0MDk4MmMtNmRjOC00MTkzLWFkNzAtNzU1NjdmMjBjNWUzIiwiYXBwaWRhY3IiOiIwIiwiZmFtaWx5X25hbWUiOiJTaGVwaWxvdiIsImdpdmVuX25hbWUiOiJBbnRvbiIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjM3LjE3MS4yMDkuMjU1IiwibmFtZSI6IkFudG9uIFNoZXBpbG92Iiwib2lkIjoiZTE0NGVhNDMtMmFhZS00MzQ0LWE2YjAtMTllOTRkZjNkYjA5IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDMyMDAyNkM1RUFDQkUiLCJyaCI6IjAuQVU0QWNLTHMxaXlQNWtxdm1zc0pkUUpHbWdNQUFBQUFBQUFBd0FBQUFBQUFBQUNEQUZRLiIsInNjcCI6ImVtYWlsIG9wZW5pZCBwcm9maWxlIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiTUU3ZjFLZlNsVTd1Y1hwUWZFcFRnM3MtVEFnQUpzbGNlNDlXVkt4VVdHdyIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJBRiIsInRpZCI6ImQ2ZWNhMjcwLThmMmMtNGFlNi1hZjlhLWNiMDk3NTAyNDY5YSIsInVuaXF1ZV9uYW1lIjoiYW50b25Ad2JvdWRpY2hlbGluYWdvcmEub25taWNyb3NvZnQuY29tIiwidXBuIjoiYW50b25Ad2JvdWRpY2hlbGluYWdvcmEub25taWNyb3NvZnQuY29tIiwidXRpIjoiVDFmcGRkUzZjRWUxa0c0TkN5eEFBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiYjc5ZmJmNGQtM2VmOS00Njg5LTgxNDMtNzZiMTk0ZTg1NTA5Il0sInhtc19zdCI6eyJzdWIiOiJaNnFaZ3RvbkVJUWQxWWRPTlpDTFJ4SVJxc3FIcTY4c3haNEE5ZGZ6NTBnIn0sInhtc190Y2R0IjoxNjc0MjI4NDEyfQ.lk317_NvCketwE-fmfTAAhSqxgjWBd8onT0XnYeAzlKkT12M90be_3hVDitOWoIXZLswg0k-RI7MTdLZpFS_8PNCOq2O0LxYxYHbihUSYgtO5ZvygCgAgd1alCSNeCaLQdaREfO94dgMXQbRCRf1pZrrhWPSSABDXxNhZkbT4PsMS5ugzYyEkCmlmM60dJ12zxZQCOT-sI46N8wralBLslWsBGyJjAu4QzZ1P-YAGyLSUzM8qPdRZf4IiGJ0HrhDgESFdBGzDUjdoPc-0c6mKEDGnG_D5EvH5B-UxoZl-QUrdRRLFPrx8jTNkMfbjNAT3czuqrsAj0cSMZ3YQ0IK6Q";

	@Test
	public void testAuthenticateSmoke() {
		//given jwt token
		OidcJwtAuthenticationToken token = new OidcJwtAuthenticationToken(authToken, idToken);
		OidcLinShareUserClaims claims = newClaims();
		claimsMockedStatic.when(() -> OidcLinShareUserClaims.fromAttributes(any())).thenReturn(claims);
		Mockito.when(oidcAuthenticationTokenDetailsFactoryMock.getAuthenticationToken(claims)).thenReturn(any());

		//when
		subj.authenticate(token);
	}

	private OidcLinShareUserClaims newClaims() {
		OidcLinShareUserClaims claims = Mockito.mock(OidcLinShareUserClaims.class);
		claimsMockedStatic.when(() -> OidcLinShareUserClaims.fromAttributes(any())).thenReturn(claims);
		return claims;
	}

	@Test
	public void testSupport() {
		assertTrue(subj.supports(OidcJwtAuthenticationToken.class),
				"OidcJwtAuthenticationToken should be supported!");
		assertFalse(subj.supports(OidcOpaqueAuthenticationToken.class),
				"OidcOpaqueAuthenticationToken shouldn't be supported!");
		assertFalse(subj.supports(JwtAuthenticationToken.class),
				"JwtAuthenticationToken shouldn't be supported!");
		assertFalse(subj.supports(org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken.class),
				"org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken shouldn't be supported!");
	}

}