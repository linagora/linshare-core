<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.linagora.linshare</groupId>
	<artifactId>linshare-core</artifactId>
	<version>7.0.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>LinShare, Secure File Sharing</name>
	<description>Specially designed to secure paperless trading companies that put privacy and traceability in the heart of their problems of exchange, Linshare provides a simple solution completely intuitive :

        * Linshare allows employees to upload files into their space
        * Linshare can share files with internal or external collaborators
        * Linshare offers several features to securely exchange
        * User&amp;share allows Linshare to communicate with the fat client
	</description>
	<url>https://github.com/linagora/linshare</url>
	<inceptionYear>2008</inceptionYear>
	<issueManagement>
		<system>LinShare GitHub</system>
		<url>https://github.com/linagora/linshare/issues</url>
	</issueManagement>
	<ciManagement>
		<system>Jenkins</system>
		<url>https://jenkins.linshare.org/jenkins/</url>
	</ciManagement>

	<scm>
		<connection>scm:git:git://github.com/linagora/linshare-core.git</connection>
		<developerConnection>scm:git:ssh://git@ci.linagora.com:7999/linagora/lgs/linshare/products/linshare-core.git</developerConnection>
		<tag>HEAD</tag>
		<url>http://github.com/linagora/linshare-core/tree/master/</url>
	</scm>

	<organization>
		<name>LINAGORA</name>
		<url>http://www.linagora.com/</url>
	</organization>
	<developers>
		<developer>
			<id>fmartin</id>
			<name>Frederic Martin</name>
			<email>fmartin@linagora.com</email>
			<organization>LINAGORA</organization>
			<organizationUrl>http://www.linagora.com/</organizationUrl>
			<roles>
				<role>Product Owner</role>
			</roles>
		</developer>
		<developer>
			<id>ysebahi</id>
			<name>Yazid SEBAHI</name>
			<organization>LINAGORA</organization>
			<organizationUrl>http://www.linagora.com/</organizationUrl>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
		<developer>
			<id>mjebahi</id>
			<name>Marwan JEBAHI</name>
			<organization>LINAGORA</organization>
			<organizationUrl>http://www.linagora.com/</organizationUrl>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
		<developer>
			<id>fbordjah</id>
			<name>Fay√ßal BORDJAH</name>
			<organization>LINAGORA</organization>
			<organizationUrl>http://www.linagora.com/</organizationUrl>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
		<developer>
			<id>akone</id>
			<name>Alioune Badara Kone</name>
			<organization>LINAGORA</organization>
			<organizationUrl>http://www.linagora.com/</organizationUrl>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
		<developer>
			<id>asall</id>
			<name>Alpha Sall</name>
			<organization>LINAGORA</organization>
			<organizationUrl>http://www.linagora.com/</organizationUrl>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
		<developer>
			<id>asiba</id>
			<name>Anais Siba</name>
			<organization>LINAGORA</organization>
			<organizationUrl>http://www.linagora.com/</organizationUrl>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
		<developer>
			<id>aduprat</id>
			<name>Antoine Duprat</name>
			<organization>LINAGORA</organization>
			<organizationUrl>http://www.linagora.com/</organizationUrl>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
	</developers>
	<licenses>
		<license>
			<name>GNU AFFERO GENERAL PUBLIC LICENSE</name>
			<url>https://github.com/linagora/linshare/blob/master/COPYING.md</url>
		</license>
	</licenses>

	<dependencyManagement>
		<dependencies>
			<!-- Bills Of Material -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>5.3.22</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson</groupId>
				<artifactId>jackson-bom</artifactId>
				<version>${jackson.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>

			<dependency>
				<!-- SLF4J API comes in different versions with Thymeleaf, LinID, Apache CXF, Apache JCloud, Quartz, Hibernate, Spring and ours, we choose our version -->
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j-release-version}</version>
			</dependency>
			<dependency>
				<!-- The Java Common Logging bridge for SLF4J comes in different versions with Apache Tika, LinID and ours, we choose our version -->
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${slf4j-release-version}</version>
			</dependency>
			<dependency>
				<!-- We force Apache Tika to use our version of Log4J -->
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-api</artifactId>
				<version>${log4j-release-version}</version>
			</dependency>

			<dependency>
				<!-- We want an upper version than the one provided by commons-dbcp -->
				<groupId>commons-pool</groupId>
				<artifactId>commons-pool</artifactId>
				<version>1.6</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact provided by Apache Tika, ClamAV and LinID -->
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>2.14.0</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact provided by Apache Tika, Apache CXF and LinID -->
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>3.13.0</version>
			</dependency>
			<dependency>
				<!-- We want an upper version than the one provided by LinID -->
				<groupId>commons-beanutils</groupId>
				<artifactId>commons-beanutils</artifactId>
				<version>1.9.4</version>
			</dependency>
			<dependency>
				<!-- We align versions of 'commons-collections:commons-collections' coming with LinID and updated by 'commons-beanutils:commons-beanutils:1.9.4'-->
				<groupId>commons-collections</groupId>
				<artifactId>commons-collections</artifactId>
				<version>3.2.2</version>
			</dependency>
			<dependency>
				<!-- Apache Tika comes with different versions of 'commons-codec', we choose one -->
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>1.16.0</version>
			</dependency>
			<dependency>
				<!-- Apache Tika comes with different versions of 'commons-compress', we choose one -->
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-compress</artifactId>
				<version>1.24.0</version>
			</dependency>

			<dependency>
				<!-- Apache CXF and Jakarta Mail come with different versions of 'jakarta.activation', we choose one -->
				<groupId>com.sun.activation</groupId>
				<artifactId>jakarta.activation</artifactId>
				<version>1.2.2</version>
			</dependency>
			<dependency>
				<!-- Apache CXF comes with different versions of 'jakarta.xml.bind-api', we choose one -->
				<groupId>jakarta.xml.bind</groupId>
				<artifactId>jakarta.xml.bind-api</artifactId>
				<version>2.3.3</version>
			</dependency>

			<dependency>
				<!-- We want a unique version of this artefact provided by Apache Tika, Apache CXF and Hibernate -->
				<groupId>org.glassfish.jaxb</groupId>
				<artifactId>jaxb-runtime</artifactId>
				<version>2.3.6</version>
			</dependency>

			<dependency>
				<!-- Hibernate comes with different versions of 'jboss-logging', we choose one -->
				<groupId>org.jboss.logging</groupId>
				<artifactId>jboss-logging</artifactId>
				<version>3.4.1.Final</version>
			</dependency>

			<dependency>
				<!-- We want an upper version than the one provided by hibernate-ehcache and LinID -->
				<groupId>net.sf.ehcache</groupId>
				<artifactId>ehcache</artifactId>
				<version>2.10.9.2</version>
			</dependency>
			<dependency>
				<!-- Apache Tika comes with different versions of 'bcprov-jdk18on', we choose one -->
				<groupId>org.bouncycastle</groupId>
				<artifactId>bcprov-jdk18on</artifactId>
				<version>1.76</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact provided by Spring and LinID -->
				<groupId>org.springframework.ldap</groupId>
				<artifactId>spring-ldap-core</artifactId>
				<version>2.4.1</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact provided by Spring and ours -->
				<groupId>com.nimbusds</groupId>
				<artifactId>oauth2-oidc-sdk</artifactId>
				<version>9.41</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact provided by diferent dependencies -->
				<groupId>com.nimbusds</groupId>
				<artifactId>nimbus-jose-jwt</artifactId>
				<version>9.23</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact provided by 'okhttp' -->
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-stdlib</artifactId>
				<version>1.6.20</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact provided by 'okhttp' -->
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-stdlib-common</artifactId>
				<version>1.6.20</version>
			</dependency>
			<dependency>
				<!-- We want an upper version than the one provided by LinID -->
				<groupId>org.mozilla</groupId>
				<artifactId>rhino</artifactId>
				<version>1.7.13</version>
			</dependency>
			<dependency>
				<groupId>com.thoughtworks.xstream</groupId>
				<artifactId>xstream</artifactId>
				<version>1.4.18</version>
			</dependency>
			<dependency>
				<groupId>io.netty</groupId>
				<artifactId>netty</artifactId>
				<version>3.10.6.Final</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact coming with several dependencies -->
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>30.1.1-jre</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact coming with several dependencies -->
				<groupId>org.javassist</groupId>
				<artifactId>javassist</artifactId>
				<version>3.28.0-GA</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact coming with several dependencies -->
				<groupId>org.checkerframework</groupId>
				<artifactId>checker-qual</artifactId>
				<version>3.8.0</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact coming with several dependencies -->
				<groupId>org.jvnet.staxex</groupId>
				<artifactId>stax-ex</artifactId>
				<version>1.8.3</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact coming with several dependencies -->
				<groupId>org.ow2.asm</groupId>
				<artifactId>asm</artifactId>
				<version>9.6</version>
			</dependency>
			<dependency>
				<!-- We want a unique version of this artefact coming with subethasmtp, org.reflections:reflections and Guava -->
				<groupId>com.google.code.findbugs</groupId>
				<artifactId>jsr305</artifactId>
				<version>3.0.2</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Spring Framework dependencies for compilation and runtime -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<exclusions>
				<exclusion>
					<!-- The logging sub-system of LinShare Core is Log4J-2. We replace 'spring-jcl' by 'jcl-over-slf4j' -->
					<groupId>org.springframework</groupId>
					<artifactId>spring-jcl</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<!-- for aspectj pointcut (ie transactions) -->
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.9.6</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${spring-security-release-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${spring-security-release-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${spring-security-release-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-acl</artifactId>
			<version>${spring-security-release-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-ldap</artifactId>
			<version>${spring-security-release-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.ldap</groupId>
			<artifactId>spring-ldap-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-crypto</artifactId>
			<version>${spring-security-release-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-client</artifactId>
			<version>${spring-security-release-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-core</artifactId>
			<version>${spring-security-release-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-jose</artifactId>
			<version>${spring-security-release-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-resource-server</artifactId>
			<version>${spring-security-release-version}</version>
		</dependency>
		
		<!-- Data bean framework -->
		<dependency>
			<groupId>jakarta.persistence</groupId>
			<artifactId>jakarta.persistence-api</artifactId>
			<version>2.2.3</version>
		</dependency>
		<dependency>
			<groupId>jakarta.xml.bind</groupId>
			<artifactId>jakarta.xml.bind-api</artifactId>
			<exclusions>
				<exclusion>
					<!-- We prefer 'com.sun.activation:jakarta.activation' provided by the project -->
					<groupId>jakarta.activation</groupId>
					<artifactId>jakarta.activation-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Data - SQL access dependencies for compilation and runtime -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-commons</artifactId>
			<version>2.6.6</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate.version}</version>
			<exclusions>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'com.sun.activation:jakarta.activation' provided by the project -->
					<groupId>javax.activation</groupId>
					<artifactId>javax.activation-api</artifactId>
				</exclusion>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.xml.bind:jakarta.xml.bind-api' already provided by Apache CXF and Hibernate -->
					<groupId>javax.xml.bind</groupId>
					<artifactId>jaxb-api</artifactId>
				</exclusion>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.transaction:jakarta.transaction-api' already provided by Apache CXF -->
					<groupId>org.jboss.spec.javax.transaction</groupId>
					<artifactId>jboss-transaction-api_1.2_spec</artifactId>
				</exclusion>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.persistence:jakarta.persistence-api' provided by the project -->
					<groupId>javax.persistence</groupId>
					<artifactId>javax.persistence-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-ehcache</artifactId>
			<version>${hibernate.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>${hibernate.validator.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${sql.driver.postgresql}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
		</dependency>
		
		<!-- Data - MongoDB access dependencies for compilation and runtime -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-mongodb</artifactId>
			<version>${spring-data.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongodb-driver-sync</artifactId>
			<version>${spring-data.driver.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongodb-driver-core</artifactId>
			<version>${spring-data.driver.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>bson</artifactId>
			<version>${spring-data.driver.version}</version>
		</dependency>

		<!-- Quartz framework -->
		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz</artifactId>
			<version>2.3.2</version>
		</dependency>

		<!-- logging sub-system -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
			<version>${slf4j-release-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j2-impl</artifactId>
			<version>${log4j-release-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j-release-version}</version>
		</dependency>

		<!-- Mime type detection tools. -->
		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-core</artifactId>
			<version>2.9.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-parsers-standard-package</artifactId>
			<version>2.9.1</version>
			<scope>runtime</scope>
			<exclusions>
				<!-- Apache Tika is used to detect MIME type. We don't use its part 'PDFBox' about PDF file manipulation -->
				<exclusion>
					<groupId>org.apache.pdfbox</groupId>
					<artifactId>pdfbox</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.pdfbox</groupId>
					<artifactId>xmpbox</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.pdfbox</groupId>
					<artifactId>preflight</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.pdfbox</groupId>
					<artifactId>jempbox</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.pdfbox</groupId>
					<artifactId>jbig2-imageio</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.pdfbox</groupId>
					<artifactId>pdfbox-tools</artifactId>
				</exclusion>
				<exclusion>
					<!-- The logging sub-system of LinShare is Log4J. We replace 'commons-logging' by 'jcl-over-slf4j' -->
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- Extends Apache Tika with support of image format JPEG -->
			<groupId>com.github.jai-imageio</groupId>
			<artifactId>jai-imageio-jpeg2000</artifactId>
			<version>1.4.0</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Apache JClouds dependencies for storage in cloud -->
		<dependency>
			<groupId>org.apache.jclouds</groupId>
			<artifactId>jclouds-core</artifactId>
			<version>${jclouds.version}</version>
			<exclusions>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jaxb-runtime' already provided by Apache Tika, Apache CXF and Hibernate -->
					<groupId>com.sun.xml.bind</groupId>
					<artifactId>jaxb-impl</artifactId>
				</exclusion>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.ws.rs:jakarta.ws.rs-api' already provided by Apache CXF -->
					<groupId>javax.ws.rs</groupId>
					<artifactId>javax.ws.rs-api</artifactId>
				</exclusion>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.annotation:jakarta.annotation-api' already provided by Apache CXF -->
					<groupId>javax.annotation</groupId>
					<artifactId>javax.annotation-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.jclouds</groupId>
			<artifactId>jclouds-allblobstore</artifactId>
			<version>${jclouds.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.jclouds</groupId>
			<artifactId>jclouds-blobstore</artifactId>
			<version>${jclouds.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jclouds</groupId>
			<artifactId>jclouds-compute</artifactId>
			<version>${jclouds.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jclouds.api</groupId>
			<artifactId>filesystem</artifactId>
			<version>${jclouds.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jclouds.api</groupId>
			<artifactId>openstack-swift</artifactId>
			<version>${jclouds.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jclouds.api</groupId>
			<artifactId>openstack-keystone</artifactId>
			<version>${jclouds.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jclouds.driver</groupId>
			<artifactId>jclouds-sshj</artifactId>
			<version>${jclouds.version}</version>
			<scope>runtime</scope>
			<exclusions>
				<exclusion>
					<!-- We prefer the Bouncy Castle's artifact build for Java 8+: bcprov-ext-jdk18on, coming With Apache Tika -->
					<groupId>org.bouncycastle</groupId>
					<artifactId>bcpkix-jdk15on</artifactId>
				</exclusion>
				<exclusion>
					<!-- We prefer the Bouncy Castle's artifact build for Java 8+: bcprov-ext-jdk18on, coming With Apache Tika -->
					<groupId>org.bouncycastle</groupId>
					<artifactId>bcprov-ext-jdk15on</artifactId>
				</exclusion>
				<exclusion>
					<!-- All classes of 'jsch.agentproxy.core' are already included in 'jsch.agentproxy.connector-factory' coming with 'jclouds-sshj' -->
					<groupId>com.jcraft</groupId>
					<artifactId>jsch.agentproxy.core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- The logging sub-system of LinShare Core is Log4J-2. We redirect logging of JClouds to SLF4J that works with Log4J-2-->
			<groupId>org.apache.jclouds.driver</groupId>
			<artifactId>jclouds-slf4j</artifactId>
			<version>${jclouds.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jclouds.driver</groupId>
			<artifactId>jclouds-enterprise</artifactId>
			<version>${jclouds.version}</version>
			<scope>runtime</scope>
			<exclusions>
				<exclusion>
					<!-- We prefer the Bouncy Castle's artifact build for Java 8+: bcprov-ext-jdk18on, coming With Apache Tika -->
					<groupId>org.bouncycastle</groupId>
					<artifactId>bcprov-ext-jdk15on</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>5.0.1</version>
			<exclusions>
				<exclusion>
					<!-- All classes of 'aopalliance' are already included in 'spring-aop' because of a redistribution licence probleme -->
					<groupId>aopalliance</groupId>
					<artifactId>aopalliance</artifactId>
				</exclusion>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.inject:jakarta.inject-api' provided by the project -->
					<groupId>javax.inject</groupId>
					<artifactId>javax.inject</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- In replacement of the Java EE artifact provided by `com.google.inject:guice` -->
			<groupId>jakarta.inject</groupId>
			<artifactId>jakarta.inject-api</artifactId>
			<version>1.0.5</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Antivirus scanner dependencies -->
		<dependency>
			<groupId>net.taldius</groupId>
			<artifactId>libclamav</artifactId>
			<version>1.0</version>
			<exclusions>
				<exclusion>
					<!-- The logging sub-system of LinShare is Log4J. We replace 'commons-logging' by 'jcl-over-slf4j' -->
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- JAX-WS and JAX-RS -->
		<dependency>
			<groupId>jakarta.servlet</groupId>
			<artifactId>jakarta.servlet-api</artifactId>
			<version>4.0.3</version>
			<!-- Provided by the servlet container Jetty or Tomcat --> 
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.sun.mail</groupId>
			<artifactId>jakarta.mail</artifactId>
			<version>1.6.7</version>
		</dependency>
		<dependency>
			<!-- In replacement of Java EE 'javax.activation:activation' and 'javax.activation:javax.activation-api' -->
			<groupId>com.sun.activation</groupId>
			<artifactId>jakarta.activation</artifactId>
		</dependency>
		<dependency>
			<groupId>jakarta.ws.rs</groupId>
			<artifactId>jakarta.ws.rs-api</artifactId>
			<version>2.1.6</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-core</artifactId>
			<version>${cxf.version}</version>
			<exclusions>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'com.sun.activation:jakarta.activation' provided by the project -->
					<groupId>jakarta.activation</groupId>
					<artifactId>jakarta.activation-api</artifactId>
				</exclusion>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.transaction:jakarta.transaction-api' already provided by Apache CXF -->
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-jta_1.1_spec</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
			<version>${cxf.version}</version>
			<exclusions>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.transaction:jakarta.transaction-api' already provided by Apache CXF -->
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-jta_1.1_spec</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-client</artifactId>
			<version>${cxf.version}</version>
			<exclusions>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.transaction:jakarta.transaction-api' already provided by Apache CXF -->
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-jta_1.1_spec</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-service-description-openapi-v3</artifactId>
			<version>${cxf.version}</version>
			<scope>runtime</scope>
			<exclusions>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'com.sun.activation:jakarta.activation' provided by the project -->
					<groupId>jakarta.activation</groupId>
					<artifactId>jakarta.activation-api</artifactId>
				</exclusion>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.transaction:jakarta.transaction-api' already provided by Apache CXF -->
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-jta_1.1_spec</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-features-logging</artifactId>
			<version>${cxf.version}</version>
			<scope>runtime</scope>
			<exclusions>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.transaction:jakarta.transaction-api' already provided by Apache CXF -->
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-jta_1.1_spec</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>swagger-ui</artifactId>
			<version>${cxf.swagger.ui.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.swagger.core.v3</groupId>
			<artifactId>swagger-models</artifactId>
			<version>${cxf.swagger.jax-rs.version}</version>
		</dependency>
		<dependency>
			<groupId>io.swagger.core.v3</groupId>
			<artifactId>swagger-annotations</artifactId>
			<version>${cxf.swagger.jax-rs.version}</version>
		</dependency>

		<!-- LDAP Query Language by LinID -->
		<dependency>
			<groupId>org.linid.dm</groupId>
			<artifactId>authorization</artifactId>
			<version>${linid.authorization.version}</version>
			<exclusions>
				<exclusion>
					<!-- The logging sub-system of LinShare is Log4J. We replace 'commons-logging' by 'jcl-over-slf4j' -->
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
				<exclusion>
					<!-- The logging sub-system of LinShare Core is Log4J-2. We replace 'slf4j-log4j12' by 'log4j-slf4j2-impl' -->
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId> 
				</exclusion>
				<exclusion>
					<!-- The logging sub-system of LinShare Core is Log4J-2.  We replace 'commons-logging' by 'log4j-over-slf4j' -->
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId> 
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Other third party products -->
		<dependency>
			<groupId>com.nimbusds</groupId>
			<artifactId>oauth2-oidc-sdk</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.aerogear</groupId>
			<artifactId>aerogear-otp-java</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.4</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<!-- XSS filter -->
			<groupId>com.googlecode.owasp-java-html-sanitizer</groupId>
			<artifactId>owasp-java-html-sanitizer</artifactId>
			<version>20191001.1</version>
		</dependency>		
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>
		<dependency>
			<groupId>org.reflections</groupId>
			<artifactId>reflections</artifactId>
			<version>0.10.1</version>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf</groupId>
			<artifactId>thymeleaf</artifactId>
			<version>${thymeleaf.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf</groupId>
			<artifactId>thymeleaf-spring4</artifactId>
			<version>${thymeleaf.version}</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>${jjwt.version}</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>${jjwt.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>${jjwt.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.passay</groupId>
			<artifactId>passay</artifactId>
			<version>1.6.1</version>
		</dependency>
		<dependency>
			<groupId>com.squareup.okhttp3</groupId>
			<artifactId>okhttp</artifactId>
			<version>4.10.0</version>
		</dependency>
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.1</version>
		</dependency>
		<dependency>
			<groupId>org.jetbrains</groupId>
			<artifactId>annotations</artifactId>
			<version>13.0</version>
		</dependency>

		<!-- Bouncy Castle -->
		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcpkix-jdk18on</artifactId>
			<version>1.76</version>
		</dependency>
		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcprov-jdk18on</artifactId>
		</dependency>

		<!-- Test dependencies - JUnit -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.9.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-commons</artifactId>
			<!-- Must be align with the version provided with junit-jupiter-api -->
			<version>1.9.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-inline</artifactId>
			<version>${mockito.version}</version>
			<!-- Needed only at runtime of unit tests -->
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<version>${spring-security-release-version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Test dependencies - Database servers-->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>de.bwaldvogel</groupId>
			<artifactId>mongo-java-server</artifactId>
			<version>${mongo.java.server}</version>
			<scope>test</scope>
		</dependency>

		<!-- Test dependencies - Mail server-->
		<dependency>
			<groupId>org.subethamail</groupId>
			<artifactId>subethasmtp</artifactId>
			<version>3.1.7</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'com.sun.activation:jakarta.activation' provided by the project -->
					<groupId>javax.activation</groupId>
					<artifactId>activation</artifactId>
				</exclusion>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'com.sun.mail:jakarta.mail' provided by the project -->
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Test dependencies - LDAP server-->
		<dependency>
			<groupId>com.unboundid</groupId>
			<artifactId>unboundid-ldapsdk</artifactId>
			<version>5.1.4</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>3.23.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>nl.jqno.equalsverifier</groupId>
			<artifactId>equalsverifier</artifactId>
			<version>3.10.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.squareup.okhttp3</groupId>
			<artifactId>mockwebserver</artifactId>
			<version>4.10.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Used directly only by unit tests, but also used as transitive dependency of dependencies declared as 'compile', so its scope must be 'compile' -->
			<groupId>com.nimbusds</groupId>
			<artifactId>nimbus-jose-jwt</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<!-- Used directly only by unit tests, but also used as transitive dependency of CXF Client and CXF RS Frontend, so its scope must be 'compile' -->
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-transports-http</artifactId>
			<version>${cxf.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<!-- We prefer the Jakarta EE artifact 'jakarta.transaction:jakarta.transaction-api' already provided by Apache CXF -->
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-jta_1.1_spec</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- Used directly only by unit tests, but also used in replacement of transitive dependency of Hibernate and CXF needed at runtime, so its scope must be 'compile' -->
			<groupId>jakarta.transaction</groupId>
			<artifactId>jakarta.transaction-api</artifactId>
			<version>1.3.1</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>linshare-core</finalName>

		<resources>
			<resource>
				<filtering>false</filtering>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>version.properties</exclude>
				</excludes>
			</resource>
			<resource>
				<filtering>true</filtering>
				<directory>src/main/resources</directory>
				<includes>
					<include>version.properties</include>
					<include>openapi-configuration-*.json</include>
				</includes>
			</resource>
		</resources>

		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
			<testResource>
				<directory>src/test/resources/sample-files</directory>
			</testResource>
			<testResource>
				<directory>src/mongo-java-server/resources</directory>
			</testResource>
		</testResources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce-java</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireJavaVersion>
									<!-- Check the OpenJDK base version of the JVM distribution used to build the project -->
									<version>[${openjdk-base.min-version},18)</version>
									<message>Java ${openjdk-base.min-version}+ is required by Linshare Core.</message>
								</requireJavaVersion>
								<enforceBytecodeVersion>
									<!-- Check that all dependencies of the project have a Java byte code compliant with our JVM distribution requirement -->
									<maxJdkVersion>${java-language.version}</maxJdkVersion>
									<!-- We don't use the mode 'strict' to be able to accept Multi-Release Jar dependency having their default classes compliant with our requirements -->
									<strict>false</strict>
								</enforceBytecodeVersion>
							</rules>
						</configuration>
					</execution>
					<execution>
						<id>enforce-maven</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireMavenVersion>
									<version>[${maven.min-version},4)</version>
									<message>Maven ${maven.min-version}+ is required to build LinShare Core.</message>
								</requireMavenVersion>
							</rules>
						</configuration>
					</execution>
					<execution>
						<id>enforce-maven-plugin-versions</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requirePluginVersions>
									<!-- Check that all Maven plugins have a version explicitely defined --> 
									<message>Best Practice is to always define a version for each Maven plugin !</message>
									<banLatest>true</banLatest>
									<banRelease>true</banRelease>
									<banSnapshots>true</banSnapshots>
									<phases>clean,deploy,site</phases>
								</requirePluginVersions>
							</rules>
						</configuration>
					</execution>
					<execution>
						<id>enforce-ban-java-ee-deps</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<bannedDependencies>
									<excludes>
										<!-- Ban all Java Activation Framework artifacts except the one provided by Jakarta EE -->
										<exclude>javax.activation:activation</exclude>
										<exclude>com.sun.activation:javax.activation</exclude>
										<exclude>org.apache.geronimo.specs:geronimo-activation_1.0.2_spec</exclude>
										<exclude>org.apache.geronimo.specs:geronimo-activation_1.1_spec</exclude>
										<exclude>jakarta.activation:jakarta.activation-api</exclude> <!-- To replace by com.sun.activation:jakarta.activation to avoid class duplication -->

										<!-- Ban all Java Mail artifacts except the one provided by Jakarta EE: com.sun.mail:jakarta.mail -->
										<exclude>com.sun.mail:javax.mail</exclude>
										<exclude>javax.mail:mail</exclude>
										<exclude>javax.mail:javax.mail-api</exclude>
										<exclude>jakarta.mail:jakarta.mail-api</exclude> <!-- Already included in com.sun.mail:jakarta.mail -->
										<exclude>org.apache.geronimo.specs:geronimo-javamail_1.4_spec</exclude>

										<!-- Ban all JaxB API artifacts except the one provided by Jakarta EE: jakarta.xml.bind:jakarta.xml.bind-api -->
										<!-- And the implementation provided by Glassfish -->
										<exclude>javax.xml.bind:jaxb-api</exclude>
										<exclude>com.sun.xml.bind:jaxb-impl</exclude> <!-- To replace by org.glassfish.jaxb:jaxb-runtime -->
										<exclude>com.sun.xml.bind:jaxb-core</exclude> <!-- To replace by org.glassfish.jaxb:jaxb-runtime -->
										<exclude>com.sun.xml.bind:jaxb-xjc</exclude> <!-- To replace by org.glassfish.jaxb:jaxb-xjc -->
										<exclude>com.sun.xml.bind:jaxb-jxc</exclude> <!-- To replace by org.glassfish.jaxb:jaxb-jxc -->

										<!-- Ban all JAX-WS artifacts except the one provided by Jakarta EE -->
										<exclude>org.apache.geronimo.specs:geronimo-jaxws_2.1_spec</exclude> <!-- To replace by jakarta.xml.ws:jakarta.xml.ws-api -->
										<exclude>org.apache.geronimo.specs:geronimo-jaxws_2.2_spec</exclude> <!-- To replace by jakarta.xml.ws:jakarta.xml.ws-api -->
										<exclude>javax.xml.ws:jaxws-api</exclude> <!-- To replace by jakarta.xml.ws:jakarta.xml.ws-api -->
										<exclude>javax.jws:jsr181-api</exclude> <!-- To replace by jakarta.jws:jakarta.jws-api -->
										<exclude>javax.jws:javax.jws-api</exclude> <!-- To replace by jakarta.jws:jakarta.jws-api -->
										<exclude>org.apache.geronimo.specs:geronimo-ws-metadata_2.0_spec</exclude> <!-- To replace by jakarta.jws:jakarta.jws-api -->

										<!-- Ban all JAX-RS artifacts except the one provided by Jakarta EE -->
										<exclude>javax.ws.rs:javax.ws.rs-api</exclude> <!-- To replace by jakarta.ws.rs:jakarta.ws.rs-api -->

										<!-- Ban all SOAP with Attachments artifacts except the one provided with Jakarta EE: com.sun.xml.messaging.saaj:saaj-impl -->
										<exclude>javax.xml.soap:saaj-api</exclude>
										<exclude>javax.xml.soap:saaj-impl</exclude>
										<exclude>com.sun.xml:saaj-impl</exclude>
										<exclude>org.apache.geronimo.specs:geronimo-saaj_1.1_spec</exclude>
										<exclude>org.apache.geronimo.specs:geronimo-saaj_1.3_spec</exclude>

										<!-- Ban all Java Bean Validation artifacts except the one provided by Jakarta EE: jakarta.validation:jakarta.validation-api -->
										<exclude>javax.validation:validation-api</exclude>

										<!-- Ban all Java Annotation artifacts except the one provided by Jakarta EE: jakarta.annotation:jakarta.annotation-api -->
										<exclude>org.apache.geronimo.specs:geronimo-annotation_1.0_spec</exclude>
										<exclude>javax.annotation:javax.annotation-api</exclude>
										<exclude>javax.annotation:jsr250-api</exclude>

										<!-- Ban all Java Messaging artifacts except the one provided by Jakarta EE: jakarta.jms:jakarta.jms-api -->
										<exclude>org.apache.geronimo.specs:geronimo-jms_1.1_spec</exclude>
										
										<!-- Ban all Java Transaction artifacts except the one provided by Jakarta EE -->
										<exclude>org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec</exclude>
										<exclude>org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec</exclude>
										<exclude>org.jboss.spec.javax.transaction:jboss-transaction-api_1.3_spec</exclude>
										<exclude>javax.transaction:javax.transaction-api </exclude>
										<exclude>javax.transaction:transaction-api</exclude>
										<exclude>javax.transaction:jta</exclude>
										<exclude>javax.transaction:api</exclude>

										<!-- Ban all Java Persistence artifacts except the one provided by Jakarta EE: jakarta.persistence:jakarta.persistence-api -->
										<exclude>javax.persistence:javax.persistence-api</exclude>
										<exclude>javax.persistence:persistence-api</exclude>

										<!-- Ban all Java Servlet artifacts except the one provided by Jakarta EE: jakarta.servlet:jakarta.servlet-api -->
										<exclude>javax.servlet:javax.servlet-api</exclude>
										<exclude>javax.servlet:servlet-api</exclude>

										<!-- Ban all Java Dependency Injection artifacts except the one provided by Jakarta EE: jakarta.inject:jakarta.inject-api -->
										<exclude>javax.inject:javax.inject</exclude>
										<exclude>javax.inject:inject</exclude>
									</excludes>
									<message>Java EE dependencies are forbidden. Please use the Jakarta EE's ones</message>
								</bannedDependencies>
							</rules>
						</configuration>
					</execution>
					<execution>
						<id>enforce-banned-dependencies</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<bannedDependencies>
									<excludes>
										<!-- LinShare Core uses Log4J-2 as logging subsystem. Log4J-1 and other logging system are banned -->
										<exclude>log4j:log4j</exclude>
										<exclude>org.slf4j:slf4j-log4j12</exclude>
									</excludes>
								</bannedDependencies>
							</rules>
							<fail>true</fail>
						</configuration>
					</execution>
					<execution>
						<!-- All versions of a dependency must converge explicitly to the same version -->
						<id>enforce-dependency-version-convergence</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<DependencyConvergence />
							</rules>
						</configuration>
					</execution>
					<execution>
						<!-- The dependency version used must be the highest version among those declared -->
						<id>enforce-upper-bound-dependencies</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireUpperBoundDeps />
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- buildnumber-maven-plugin (compute timestamp, build number, ...)-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!--  It will first check to see if you have locally modified files, and will fail if there are any.  -->
					<!-- -Dmaven.buildNumber.doCheck=true -->
					<doCheck>false</doCheck>
					<!-- Update your local repository -->
					<!-- -Dmaven.buildNumber.doUpdate=true -->
					<doUpdate>false</doUpdate>
					<buildNumberPropertyName>sources.version</buildNumberPropertyName>
					<timestampPropertyName>build.timestamp</timestampPropertyName>
					<timestampFormat>yyyy-MM-dd HH:mm</timestampFormat>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<!-- Verify that all dependencies used are declared and that all dependencies declared are used -->
						<id>analyze</id>
						<phase>process-test-classes</phase>
						<goals>
							<!-- 'analyze-only' uses the compiled classes (analyze will compile then itself!) -->
							<goal>analyze-only</goal>
						</goals>
						<configuration>
							<ignoreNonCompile>${maven-dependency-plugin.ignoreNonCompile}</ignoreNonCompile>
							<failOnWarning>${maven-dependency-plugin.failOnWarning}</failOnWarning>
							<ignoredUnusedDeclaredDependencies>
								<!-- Required logging runtime dependencies -->
								<ignoredUnusedDeclaredDependency>org.apache.logging.log4j:log4j-slf4j2-impl</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>org.slf4j:log4j-over-slf4j</ignoredUnusedDeclaredDependency>

								<!-- Required Spring runtime dependencies -->
								<ignoredUnusedDeclaredDependency>org.springframework:spring-aop</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>org.aspectj:aspectjweaver</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>org.springframework.security:spring-security-config</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>org.springframework.security:spring-security-acl</ignoredUnusedDeclaredDependency>

								<!-- Required database runtime dependencies -->
								<ignoredUnusedDeclaredDependency>org.hibernate:hibernate-ehcache</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>org.hibernate.validator:hibernate-validator</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>commons-dbcp:commons-dbcp</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>org.postgresql:postgresql</ignoredUnusedDeclaredDependency>

								<!-- Required Apache Tika runtime dependencies -->
								<ignoredUnusedDeclaredDependency>org.apache.tika:tika-parsers-standard-package</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>com.github.jai-imageio:jai-imageio-jpeg2000</ignoredUnusedDeclaredDependency>

								<!-- Required Apache JClouds runtime dependencies -->
								<ignoredUnusedDeclaredDependency>org.apache.jclouds:jclouds-allblobstore</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>org.apache.jclouds.driver:jclouds-sshj</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>org.apache.jclouds.driver:jclouds-enterprise</ignoredUnusedDeclaredDependency>
								<!-- Used at compilation time for a constant definition which is not detected as used -->
								<ignoredUnusedDeclaredDependency>org.apache.jclouds.api:filesystem</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>org.apache.jclouds.api:openstack-keystone</ignoredUnusedDeclaredDependency>

								<!-- Required Apache CXF and Swagger UI runtime dependencies -->
								<ignoredUnusedDeclaredDependency>org.apache.cxf:cxf-rt-features-logging</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>org.apache.cxf:cxf-rt-rs-service-description-openapi-v3</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>org.webjars:swagger-ui</ignoredUnusedDeclaredDependency>

								<!-- Required JWT runtime dependencies -->
								<ignoredUnusedDeclaredDependency>io.jsonwebtoken:jjwt-impl</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>io.jsonwebtoken:jjwt-jackson</ignoredUnusedDeclaredDependency>
								
								<!-- Required at runtime in replacement of anothers artifacts -->
								<ignoredUnusedDeclaredDependency>jakarta.inject:jakarta.inject-api</ignoredUnusedDeclaredDependency>

								<!-- Required at runtime in standalone mode or by unit tests -->
								<ignoredUnusedDeclaredDependency>org.mockito:mockito-inline</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>com.h2database:h2</ignoredUnusedDeclaredDependency>
								<ignoredUnusedDeclaredDependency>de.bwaldvogel:mongo-java-server</ignoredUnusedDeclaredDependency>
							</ignoredUnusedDeclaredDependencies>
							<ignoredNonTestScopedDependencies>
								<!-- Used directly only by unit test, but also used as transitive dependency of Hibernate -->
								<ignoredNonTestScopedDependency>jakarta.transaction:jakarta.transaction-api</ignoredNonTestScopedDependency>
								<!-- Used directly only by unit test, but also used as transitive dependency of CXF Client and CXF RS Frontend -->
								<ignoredNonTestScopedDependency>org.apache.cxf:cxf-rt-transports-http</ignoredNonTestScopedDependency>
								<!-- Used directly only by unit test, but also used as transitive dependency of 'spring-orm' and LinID -->
								<ignoredNonTestScopedDependency>org.springframework:spring-jdbc</ignoredNonTestScopedDependency>
								<!-- Used directly only by unit test, but also used as transitive dependency of 'oaut2-oidc-sdk' and 'spring-security-auth2-jose' -->
								<ignoredNonTestScopedDependency>com.nimbusds:nimbus-jose-jwt</ignoredNonTestScopedDependency>
							</ignoredNonTestScopedDependencies>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- maven-surefire-plugin (test reports) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<useSystemClassLoader>false</useSystemClassLoader>
				</configuration>
			</plugin>

			<!-- maven-war-plugin (packaging) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Build>${sources.version} ${build.timestamp}</Implementation-Build>
						</manifestEntries>
					</archive>
				</configuration>
				<executions>
					<execution>
						<id>default-war</id>
						<phase>package</phase>
						<goals>
							<goal>war</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- swagger-maven-plugin -->
			<plugin>
				<!-- https://github.com/openapi-tools/swagger-maven-plugin -->
				<groupId>io.openapitools.swagger</groupId>
				<artifactId>swagger-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>admin v5</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<attachSwaggerArtifact>true</attachSwaggerArtifact>
							<resourcePackages>
								<resourcePackage>org.linagora.linshare.webservice.adminv5</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.adminv5.impl</resourcePackage>
								<resourcePackage>org.linagora.linshare.core.facade.webservice.adminv5.dto</resourcePackage>
							</resourcePackages>
							<outputDirectory>${basedir}/target/swagger/</outputDirectory>
							<outputFilename>swagger-admin-v5</outputFilename>
							<outputFormats>
								<outputFormat>JSON</outputFormat>
								<outputFormat>YAML</outputFormat>
							</outputFormats>
							<prettyPrint>true</prettyPrint>
							<swaggerConfig>
								<info>
									<title>Admin v5 API</title>
									<version>${project.version}</version>
									<contact>
										<name>LINAGORA/LinShare</name>
										<url>https://github.com/linagora/linshare</url>
									</contact>
									<license>
										<url>http://download.linshare.org/LinShare-License_AfferoGPL-v3_en.pdf</url>
										<name>Affero GPL v3</name>
									</license>
								</info>
							</swaggerConfig>
						</configuration>
					</execution>
					<execution>
						<id>admin v4</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<attachSwaggerArtifact>true</attachSwaggerArtifact>
							<resourcePackages>
								<resourcePackage>org.linagora.linshare.webservice.adminv4</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.adminv4.impl</resourcePackage>
							</resourcePackages>
							<outputDirectory>${basedir}/target/swagger/</outputDirectory>
							<outputFilename>swagger-admin-v4</outputFilename>
							<outputFormats>
								<outputFormat>JSON</outputFormat>
								<outputFormat>YAML</outputFormat>
							</outputFormats>
							<prettyPrint>true</prettyPrint>
							<swaggerConfig>
								<info>
									<title>Admin v4 API</title>
									<version>${project.version}</version>
									<contact>
										<name>LINAGORA/LinShare</name>
										<url>https://github.com/linagora/linshare</url>
									</contact>
									<license>
										<url>http://download.linshare.org/LinShare-License_AfferoGPL-v3_en.pdf</url>
										<name>Affero GPL v3</name>
									</license>
								</info>
							</swaggerConfig>
						</configuration>
					</execution>
					<execution>
						<id>admin v1</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<attachSwaggerArtifact>true</attachSwaggerArtifact>
							<resourcePackages>
								<resourcePackage>org.linagora.linshare.webservice.admin</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.admin.impl</resourcePackage>
							</resourcePackages>
							<outputDirectory>${basedir}/target/swagger/</outputDirectory>
							<outputFilename>swagger-admin-v1</outputFilename>
							<outputFormats>
								<outputFormat>JSON</outputFormat>
								<outputFormat>YAML</outputFormat>
							</outputFormats>
							<prettyPrint>true</prettyPrint>
							<swaggerConfig>
								<info>
									<title>Admin v1 API</title>
									<version>${project.version}</version>
									<contact>
										<name>LINAGORA/LinShare</name>
										<url>https://github.com/linagora/linshare</url>
									</contact>
									<license>
										<url>http://download.linshare.org/LinShare-License_AfferoGPL-v3_en.pdf</url>
										<name>Affero GPL v3</name>
									</license>
								</info>
							</swaggerConfig>
						</configuration>
					</execution>
					<execution>
						<id>user v2</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<attachSwaggerArtifact>true</attachSwaggerArtifact>
							<resourcePackages>
								<resourcePackage>org.linagora.linshare.webservice.userv2</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.userv2.impl</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.userv2.impl.only</resourcePackage>
							</resourcePackages>
							<outputDirectory>${basedir}/target/swagger/</outputDirectory>
							<outputFilename>swagger-user-v2</outputFilename>
							<outputFormats>
								<outputFormat>JSON</outputFormat>
								<outputFormat>YAML</outputFormat>
							</outputFormats>
							<prettyPrint>true</prettyPrint>
							<swaggerConfig>
								<info>
									<title>User v2 API</title>
									<version>${project.version}</version>
									<contact>
										<name>LINAGORA/LinShare</name>
										<url>https://github.com/linagora/linshare</url>
									</contact>
									<license>
										<url>http://download.linshare.org/LinShare-License_AfferoGPL-v3_en.pdf</url>
										<name>Affero GPL v3</name>
									</license>
								</info>
							</swaggerConfig>
						</configuration>
					</execution>
					<execution>
						<id>user v4</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<attachSwaggerArtifact>true</attachSwaggerArtifact>
							<resourcePackages>
								<resourcePackage>org.linagora.linshare.webservice.userv4</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.userv4.impl</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.userv2</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.userv2.impl</resourcePackage>
							</resourcePackages>
							<outputDirectory>${basedir}/target/swagger/</outputDirectory>
							<outputFilename>swagger-user-v4</outputFilename>
							<outputFormats>
								<outputFormat>JSON</outputFormat>
								<outputFormat>YAML</outputFormat>
							</outputFormats>
							<prettyPrint>true</prettyPrint>
							<swaggerConfig>
								<info>
									<title>User v4 API</title>
									<version>${project.version}</version>
									<contact>
										<name>LINAGORA/LinShare</name>
										<url>https://github.com/linagora/linshare</url>
									</contact>
									<license>
										<url>http://download.linshare.org/LinShare-License_AfferoGPL-v3_en.pdf</url>
										<name>Affero GPL v3</name>
									</license>
								</info>
							</swaggerConfig>
						</configuration>
					</execution>
					<execution>
						<id>user v5</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<attachSwaggerArtifact>true</attachSwaggerArtifact>
							<resourcePackages>
								<resourcePackage>org.linagora.linshare.webservice.userv5</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.userv5.impl</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.userv2</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.userv2.impl</resourcePackage>
							</resourcePackages>
							<outputDirectory>${basedir}/target/swagger/</outputDirectory>
							<outputFilename>swagger-user-v5</outputFilename>
							<outputFormats>
								<outputFormat>JSON</outputFormat>
								<outputFormat>YAML</outputFormat>
							</outputFormats>
							<prettyPrint>true</prettyPrint>
							<swaggerConfig>
								<info>
									<title>User v5 API</title>
									<version>${project.version}</version>
									<contact>
										<name>LINAGORA/LinShare</name>
										<url>https://github.com/linagora/linshare</url>
									</contact>
									<license>
										<url>http://download.linshare.org/LinShare-License_AfferoGPL-v3_en.pdf</url>
										<name>Affero GPL v3</name>
									</license>
								</info>
							</swaggerConfig>
						</configuration>
					</execution>
					<execution>
						<id>delegation v2</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<attachSwaggerArtifact>true</attachSwaggerArtifact>
							<resourcePackages>
								<resourcePackage>org.linagora.linshare.webservice.delegationv2</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.delegationv2.impl</resourcePackage>
							</resourcePackages>
							<outputDirectory>${basedir}/target/swagger/</outputDirectory>
							<outputFilename>swagger-delegation-v2</outputFilename>
							<outputFormats>
								<outputFormat>JSON</outputFormat>
								<outputFormat>YAML</outputFormat>
							</outputFormats>
							<prettyPrint>true</prettyPrint>
							<swaggerConfig>
								<info>
									<title>Delegation v2 API</title>
									<version>${project.version}</version>
									<contact>
										<name>LINAGORA/LinShare</name>
										<url>https://github.com/linagora/linshare</url>
									</contact>
									<license>
										<url>http://download.linshare.org/LinShare-License_AfferoGPL-v3_en.pdf</url>
										<name>Affero GPL v3</name>
									</license>
								</info>
							</swaggerConfig>
						</configuration>
					</execution>
					<execution>
						<id>external</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<attachSwaggerArtifact>true</attachSwaggerArtifact>
							<resourcePackages>
								<resourcePackage>org.linagora.linshare.webservice.external</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.external.impl</resourcePackage>
							</resourcePackages>
							<outputDirectory>${basedir}/target/swagger/</outputDirectory>
							<outputFilename>swagger-external</outputFilename>
							<outputFormats>
								<outputFormat>JSON</outputFormat>
								<outputFormat>YAML</outputFormat>
							</outputFormats>
							<prettyPrint>true</prettyPrint>
							<swaggerConfig>
								<info>
									<title>External (anonymous) API</title>
									<version>${project.version}</version>
									<contact>
										<name>LINAGORA/LinShare</name>
										<url>https://github.com/linagora/linshare</url>
									</contact>
									<license>
										<url>http://download.linshare.org/LinShare-License_AfferoGPL-v3_en.pdf</url>
										<name>Affero GPL v3</name>
									</license>
								</info>
							</swaggerConfig>
						</configuration>
					</execution>
					<execution>
						<id>upload request v4</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<attachSwaggerArtifact>true</attachSwaggerArtifact>
							<resourcePackages>
								<resourcePackage>org.linagora.linshare.webservice.uploadrequestv4</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.uploadrequestv4.impl</resourcePackage>
							</resourcePackages>
							<outputDirectory>${basedir}/target/swagger/</outputDirectory>
							<outputFilename>swagger-upload-request-v4</outputFilename>
							<outputFormats>
								<outputFormat>JSON</outputFormat>
								<outputFormat>YAML</outputFormat>
							</outputFormats>
							<prettyPrint>true</prettyPrint>
							<swaggerConfig>
								<info>
									<title>Upload Request v4 API</title>
									<version>${project.version}</version>
									<contact>
										<name>LINAGORA/LinShare</name>
										<url>https://github.com/linagora/linshare</url>
									</contact>
									<license>
										<url>http://download.linshare.org/LinShare-License_AfferoGPL-v3_en.pdf</url>
										<name>Affero GPL v3</name>
									</license>
								</info>
							</swaggerConfig>
						</configuration>
					</execution>
					<execution>
						<id>upload request v5</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<attachSwaggerArtifact>true</attachSwaggerArtifact>
							<resourcePackages>
								<resourcePackage>org.linagora.linshare.webservice.uploadrequestv5</resourcePackage>
								<resourcePackage>org.linagora.linshare.webservice.uploadrequestv5.impl</resourcePackage>
							</resourcePackages>
							<outputDirectory>${basedir}/target/swagger/</outputDirectory>
							<outputFilename>swagger-upload-request-v5</outputFilename>
							<outputFormats>
								<outputFormat>JSON</outputFormat>
								<outputFormat>YAML</outputFormat>
							</outputFormats>
							<prettyPrint>true</prettyPrint>
							<swaggerConfig>
								<info>
									<title>Upload Request v5 API</title>
									<version>${project.version}</version>
									<contact>
										<name>LINAGORA/LinShare</name>
										<url>https://github.com/linagora/linshare</url>
									</contact>
									<license>
										<url>http://download.linshare.org/LinShare-License_AfferoGPL-v3_en.pdf</url>
										<name>Affero GPL v3</name>
									</license>
								</info>
							</swaggerConfig>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>ant-merge-files-import-postgres</id>
						<phase>process-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<mkdir dir="target/classes/sql/postgresql/" />
								<concat destfile="target/classes/sql/postgresql/import-postgresql.sql">
									<fileset
										file="src/main/resources/sql/common/import-header.sql" />
									<fileset
										file="src/main/resources/sql/common/import-domains.sql" />
									<fileset
										file="src/main/resources/sql/common/import-quota.sql" />
									<fileset
										file="src/main/resources/sql/common/import-welcome-messages.sql" />
									<fileset
										file="src/main/resources/sql/common/import-functionalities.sql" />
									<fileset
										file="src/main/resources/sql/common/import-mail-activation.sql" />
									<fileset
										file="src/main/resources/sql/common/import_mail_structure.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_layout/*.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_content/*.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_footer/*.sql" />
									<fileset
										file="src/main/resources/sql/common/import-settings.sql" />
									<fileset
										file="src/main/resources/sql/common/import-footer.sql" />
								</concat>
							</target>
						</configuration>
					</execution>
					<execution>
						<id>ant-merge-files-mail-templates</id>
						<phase>process-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<mkdir dir="target/classes/sql/postgresql/" />
								<concat destfile="target/classes/sql/postgresql/import-all-emails.sql">
									<fileset
										file="src/main/resources/sql/common/import-header.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_layout/*.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_content/*.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_footer/*.sql" />
									<fileset
										file="src/main/resources/sql/common/import-footer.sql" />
								</concat>
							</target>
						</configuration>
					</execution>
					<execution>
						<id>ant-merge-files-mail-templates-h2</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<mkdir dir="target/classes/sql/h2/" />
								<concat destfile="target/classes/sql/h2/import-all-emails.sql">
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_layout/*.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_content/*.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_footer/*.sql" />
								</concat>
							</target>
						</configuration>
					</execution>
					<execution>
						<id>ant-merge-files-mail-templates-for-reset-mails</id>
						<phase>process-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<mkdir dir="target/classes/sql/postgresql/" />
								<concat destfile="target/classes/sql/postgresql/reset-default-emails-config.sql">
									<fileset
										file="src/main/resources/sql/common/import-reset-default-emails-configuration-header.sql" />
									<fileset
										file="src/main/resources/sql/common/import_mail_structure.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_layout/*.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_content/*.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_footer/*.sql" />
									<fileset
										file="src/main/resources/sql/common/import-reset-default-emails-configuration-footer.sql" />
								</concat>
							</target>
						</configuration>
					</execution>
					<execution>
						<id>ant-merge-files-mail-templates-for-update-mails</id>
						<phase>process-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<mkdir dir="target/classes/sql/postgresql/" />
								<concat destfile="target/classes/sql/postgresql/update-default-emails-config.sql">
									<fileset
										file="src/main/resources/sql/common/import-update-default-emails-configuration-header.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_layout/*.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_content/*.sql" />
									<fileset
										file="src/main/resources/sql/common/mail_updates/mail_footer/*.sql" />
									<fileset
										file="src/main/resources/sql/common/import-update-default-emails-configuration-footer.sql" />
								</concat>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- maven-assembly-plugin for sql files -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<appendAssemblyId>true</appendAssemblyId>
				</configuration>
				<executions>
					<execution>
						<id>sql</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>src/assembly/sql.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
					<execution>
						<id>documentation-webservices</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>src/assembly/documentation-webservices.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<failOnError>false</failOnError>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.basepom.maven</groupId>
				<artifactId>duplicate-finder-maven-plugin</artifactId>
				<version>2.0.1</version>
				<executions>
					<execution>
						<id>enforce-no-duplicate-classes</id>
						<phase>verify</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<failBuildInCaseOfConflict>true</failBuildInCaseOfConflict>
							<failBuildInCaseOfEqualContentConflict>true</failBuildInCaseOfEqualContentConflict>
							<failBuildInCaseOfDifferentContentConflict>true</failBuildInCaseOfDifferentContentConflict>
							<printEqualFiles>true</printEqualFiles>
							<ignoredResourcePatterns>
								<!-- TODO: Find a way to avoid duplication of these resources -->
								<ignoredResourcePattern>/?[^/]*?springContext-datasource\.xml$</ignoredResourcePattern>
								<ignoredResourcePattern>/?[^/]*?springContext-mongo\.xml$</ignoredResourcePattern>
								<ignoredResourcePattern>/?[^/]*?springContext-storage-jcloud\.xml$</ignoredResourcePattern>
								<ignoredResourcePattern>/?[^/]*?log4j2\.properties$</ignoredResourcePattern>
							</ignoredResourcePatterns>
							<exceptions>
								<exception>
									<!-- Duplicated (but equal) classes in LinID. This can be solved only improving LinID, that's why these exceptions are needed --> 
									<conflictingDependencies>
										<dependency>
											<groupId>org.linid.dm</groupId>
											<artifactId>authorization</artifactId>
										</dependency>
										<dependency>
											<groupId>org.linid.dm</groupId>
											<artifactId>core</artifactId>
										</dependency>
									</conflictingDependencies>
									<currentProject>false</currentProject>
									<classes>
										<class>org.linid.dm.utils.CaseInsensitiveMap</class>
										<class>org.linid.dm.utils.CaseInsensitiveSet</class>
									</classes>
								</exception>
							</exceptions>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- maven-install-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>

			<!-- maven-deploy-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>false</skip>
				</configuration>
			</plugin>

			<!-- Change licence -->
			<!-- To update the license run mvn license:format -->
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<configuration>
					<properties>
						<owner>Anton Shepilov</owner>
						<email>ashepilov@linagora.com</email>
					</properties>
					<licenseSets>
						<licenseSet>
							<header>LICENSE_INLINE</header>
							<excludes>
								<exclude>**/*.yml</exclude>
								<exclude>**/*.xml</exclude>
								<exclude>**/*.properties</exclude>
								<exclude>**/README</exclude>
								<exclude>src/test/resources/**</exclude>
								<exclude>src/main/resources/**</exclude>
							</excludes>
						</licenseSet>
					</licenseSets>
				</configuration>
			</plugin>

			<!-- maven-release-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<configuration>
					<tagNameFormat>@{project.version}</tagNameFormat>
					<!--During release:perform, enable the "release" profile -->
					<!-- <releaseProfiles>release</releaseProfiles> -->
				</configuration>
			</plugin>

			<!-- Maven Jetty Plugin 9.x : run the application using "mvn jetty:run" -->
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<configuration>
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<webApp>
						<contextPath>/linshare</contextPath>
					</webApp>
					<!-- -Djetty.port=8080 -->
					<httpConnector>
						<port>8080</port>
					</httpConnector>
				</configuration>
				<!--  not supported yet
				<requestLog implementation="org.mortbay.jetty.NCSARequestLog">
					This doesn't do anything for Jetty, but is a workaround for a Maven
						bug that prevents the requestLog from being set.
					<append>true</append>
				</requestLog>
				-->
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.3.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>3.4.1</version>
					<dependencies>
						<dependency>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>extra-enforcer-rules</artifactId>
							<version>1.7.0</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>buildnumber-maven-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>3.5.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.3.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.12.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.6.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.2.5</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>3.4.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>3.6.3</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>3.6.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>3.1.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>3.1.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>3.0.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-scm-plugin</artifactId>
					<version>2.0.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>4.0.0-M13</version>
				</plugin>
				<plugin>
					<groupId>com.mycila</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>4.3</version>
				</plugin>
				<plugin>
					<groupId>io.openapitools.swagger</groupId>
					<artifactId>swagger-maven-plugin</artifactId>
					<version>2.1.6</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<plugin>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>9.4.53.v20231009</version>
				</plugin>
				<plugin>
					<!-- mvn versions:display-plugin-updates versions:display-dependency-updates -->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>2.16.2</version>
					<configuration>
						<rulesUri>file:///${project.basedir}/src/dependencies/rules.xml</rulesUri>
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.google.code.maven-replacer-plugin</groupId>
					<artifactId>replacer</artifactId>
					<version>1.5.3</version>
				</plugin>
				<plugin>
					<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.zcore.maven</groupId>
										<artifactId>merge-maven-plugin</artifactId>
										<versionRange>[0.0.3,)</versionRange>
										<goals>
											<goal>merge</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[3.1.0,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<reporting>
		<!-- Adds a report detailing the components, mixins and base classes defined by this module. -->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>3.5.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.6.3</version>
			</plugin>
			<!-- it does not seem to work <plugin> <groupId>org.apache.tapestry</groupId> <artifactId>tapestry-component-report</artifactId>
				<version>${tapestry-release-version}</version> <configuration> <rootPackage>org.linagora.linshare.view.tapestry</rootPackage> </configuration>
				</plugin> -->
		</plugins>
	</reporting>

	<profiles>
		<!--  profile:id=default -->
		<profile>
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<!--  profile:id=dev -->
		<profile>
			<id>dev</id>
			<build>
				<finalName>linshare-core-${project.version}-${maven.build.timestamp}-${sources.version}</finalName>
			</build>
			<properties>
				<project.version>${project.version}-${maven.build.timestamp}-${sources.version}</project.version>
			</properties>
		</profile>

		<profile>
			<!-- Continuous integration profile -->
			<id>jacoco-profile</id>
			<properties>
				<!-- These are properties that could be changed by the CI if needed -->
				<jacoco-plugin.version>0.8.11</jacoco-plugin.version>
			</properties>
			<build>
				<plugins>
					<plugin>
						<!-- Let's activate jacoco for unit test coverage -->
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco-plugin.version}</version>
						<executions>
							<execution>
								<!-- This activates the use of jacoco for recording unit test coverage -->
								<id>prepare-agent</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<!-- This activates the use of jacoco for recording integration test coverage -->
								<id>prepare-agent-integration</id>
								<goals>
									<goal>prepare-agent-integration</goal>
								</goals>
							</execution>
							<execution>
								<id>report</id>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<formats>
										<format>XML</format>
									</formats>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--  profile:id=load-integration-context -->
		<profile>
			<id>load-integration-context</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>ant-load-integration-context</id>
								<phase>compile</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target name="copySql">
										<copy todir="${project.build.outputDirectory}" overwrite="true">
											<fileset file="${basedir}/src/test/resources/DISABLED-springContext-datasource-integration.xml"/>
											<globmapper from="DISABLED-springContext-datasource-integration.xml" to="springContext-datasource.xml"/>
										</copy>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<profile>
			<!-- Profile to launch LinShare Core standalonely with a MongoDB server embedded -->
			<id>mongo-java-server</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>use-mongo-java-server</id>
								<phase>compile</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target name="copy-mongo-java-server">
										<copy todir="${project.build.outputDirectory}/" overwrite="true" flatten="true">
											<fileset dir="src/mongo-java-server/resources" />
										</copy>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>de.bwaldvogel</groupId>
					<artifactId>mongo-java-server</artifactId>
					<version>${mongo.java.server}</version>
				</dependency>
				<dependency>
					<groupId>org.springframework.data</groupId>
					<artifactId>spring-data-mongodb</artifactId>
					<version>${spring-data.version}</version>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- Profile to launch LinShare Core standalonely with a H2 embedded fatabase -->
			<id>h2</id>
			<dependencies>
				<dependency>
					<groupId>com.h2database</groupId>
					<artifactId>h2</artifactId>
					<version>${h2.version}</version>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- Profile to launch LinShare Core standalonely with an embedded SMTP server -->
			<id>local</id>
			<activation>
				<property>
					<name>target</name>
					<value>local</value>
				</property>
			</activation>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
					</resource>
					<resource>
						<directory>src/subethamail/resources</directory>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-source</id>
								<phase>generate-sources</phase>
								<inherited>false</inherited>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>src/subethamail/java</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.subethamail</groupId>
					<artifactId>subethasmtp</artifactId>
					<version>3.1.7</version>
					<exclusions>
						<exclusion>
							<groupId>org.slf4j</groupId>
							<artifactId>slf4j-simple</artifactId>
						</exclusion>
						<exclusion>
							<!-- We prefer 'com.sun.activation:jakarta.activation' provided by the project -->
							<groupId>javax.activation</groupId>
							<artifactId>activation</artifactId>
						</exclusion>
						<exclusion>
							<!-- We prefer Jakarta EE artifact 'com.sun.mail:jakarta.mail' provided by the project -->
							<groupId>javax.mail</groupId>
							<artifactId>mail</artifactId>
						</exclusion>
					</exclusions>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<id>update-version</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>parse-version</id>
								<goals>
									<!-- Parses project version and generates properties as: 'parsedVersion.majorVersion', 'parsedVersion.minorVersion' and 'parsedVersion.incrementalVersion' -->
									<goal>parse-version</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.google.code.maven-replacer-plugin</groupId>
						<artifactId>replacer</artifactId>
						<executions>
							<execution>
								<id>import-settings.sql</id>
								<phase>validate</phase>
								<goals>
									<goal>replace</goal>
								</goals>
								<configuration>
									<file>src/main/resources/sql/common/import-settings.sql</file>
									<replacements>
										<replacement>
											<token>'[0-9]\.[0-9]\.[0-9]'</token>
											<value>'${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}'</value>
										</replacement>
									</replacements>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<repositories>
		<repository>
			<id>Linagora-LinShare-Repositories</id>
			<url>https://nexus.linagora.com/content/groups/linshare</url>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>daily</updatePolicy>
			</snapshots>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>daily</updatePolicy>
			</releases>
		</repository>
	</repositories>

	<distributionManagement>
		<repository>
			<id>Linagora-LinShare-Releases</id>
			<name>Linagora LinShare Releases</name>
			<url>https://nexus.linagora.com/content/repositories/linshare-releases</url>
		</repository>
		<snapshotRepository>
			<id>Linagora-LinShare-Snapshots</id>
			<name>Linagora LinShare Snapshots</name>
			<url>https://nexus.linagora.com/content/repositories/linshare-snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<properties>
		<!-- System requirement properties -->
		<java-language.version>17</java-language.version>
		<openjdk-base.min-version>${java-language.version}.0.9</openjdk-base.min-version>
		<maven.min-version>3.9.6</maven.min-version>

		<!-- Project source code properties -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Maven plugin properties -->
		<maven.compiler.release>${java-language.version}</maven.compiler.release>
		<maven.compiler.source>${java-language.version}</maven.compiler.source>
		<maven.compiler.target>${java-language.version}</maven.compiler.target>
		<maven.compiler.showDeprecation>true</maven.compiler.showDeprecation>
		<maven.compiler.showWarnings>true</maven.compiler.showWarnings>
		<maven.build.timestamp.format>yyyy.MM.dd-HH.mm.ss</maven.build.timestamp.format>
		
		<maven-dependency-plugin.ignoreNonCompile>false</maven-dependency-plugin.ignoreNonCompile>
		<maven-dependency-plugin.failOnWarning>true</maven-dependency-plugin.failOnWarning>

		<!-- Dependency properties -->
		<apache-directory-server.version>1.5.5</apache-directory-server.version>
		<cxf.version>3.4.4</cxf.version>
		<!-- We can not yet upgrade from 3.4.4 to 3.5.3 because there is an unexpected NPE during file uploads -->
		<cxf.swagger.ui.version>3.52.5</cxf.swagger.ui.version>
		<cxf.swagger.jax-rs.version>2.1.6</cxf.swagger.jax-rs.version>
		<guava.version>30.1.1-jre</guava.version>
		<h2.version>1.4.200</h2.version>
		<hibernate.version>5.4.30.Final</hibernate.version>
		<jackson.version>2.15.2</jackson.version>
		<hibernate.validator.version>6.2.0.Final</hibernate.validator.version>
		<jclouds.version>2.5.0</jclouds.version>
		<jjwt.version>0.11.2</jjwt.version>
		<linid.authorization.version>2.1.2.1</linid.authorization.version>
		<mongo.java.server>1.40.0</mongo.java.server>
		<servlet.context.version>3.0.1</servlet.context.version>
		<slf4j-release-version>2.0.9</slf4j-release-version>
		<log4j-release-version>2.23.1</log4j-release-version>
		<spring-security-release-version>5.7.2</spring-security-release-version>
		<spring-data.version>3.3.6</spring-data.version>
		<spring-data.driver.version>4.4.2</spring-data.driver.version>
		<sql.driver.postgresql>42.4.1</sql.driver.postgresql>
		<thymeleaf.version>3.0.15.RELEASE</thymeleaf.version>
		<mockito.version>3.12.4</mockito.version>
	</properties>
</project>
